# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
# from ...code_deploy import _aws_ecs_service.blue_green.CodeDeploy
from .ecr_image import EcrImage

__all__ = ['EcsServiceArgs', 'EcsService']

@pulumi.input_type
class EcsServiceArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a EcsService resource.
        """
        pass


class EcsService(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        Create a EcsService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EcsServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EcsService resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EcsServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EcsServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EcsServiceArgs.__new__(EcsServiceArgs)

            __props__.__dict__["code_deploy"] = None
            __props__.__dict__["ecr_image"] = None
        super(EcsService, __self__).__init__(
            'ipidp:aws_ecs_service/service:EcsService',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="codeDeploy")
    def code_deploy(self) -> pulumi.Output[Optional['_aws_ecs_service.blue_green.CodeDeploy']]:
        return pulumi.get(self, "code_deploy")

    @property
    @pulumi.getter(name="ecrImage")
    def ecr_image(self) -> pulumi.Output[Optional['EcrImage']]:
        return pulumi.get(self, "ecr_image")

